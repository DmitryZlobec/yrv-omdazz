|ps2_key
clk => clk.IN4
rst_n => rst_n.IN3
switch[0] => switch[0].IN1
switch[1] => switch[1].IN1
switch[2] => switch[2].IN1
switch[3] => switch[3].IN1
ps2k_clk => ps2k_clk.IN1
ps2k_data => ps2k_data.IN1
rs232_tx << my_uart_tx:my_uart_tx.rs232_tx
dig[0] << digits:digits.dig
dig[1] << digits:digits.dig
dig[2] << digits:digits.dig
dig[3] << digits:digits.dig
seg[0] << digits:digits.seg
seg[1] << digits:digits.seg
seg[2] << digits:digits.seg
seg[3] << digits:digits.seg
seg[4] << digits:digits.seg
seg[5] << digits:digits.seg
seg[6] << digits:digits.seg
seg[7] << digits:digits.seg
led[0] << ps2scan:ps2scan.led
led[1] << ps2scan:ps2scan.led
led[2] << ps2scan:ps2scan.led
led[3] << ps2scan:ps2scan.led


|ps2_key|ps2scan:ps2scan
clk => newcode2.CLK
clk => newkey.CLK
rst_n => ps2_asci[0].ACLR
rst_n => ps2_asci[1].ACLR
rst_n => ps2_asci[2].ACLR
rst_n => ps2_asci[3].ACLR
rst_n => ps2_asci[4].ACLR
rst_n => ps2_asci[5].ACLR
rst_n => ps2_asci[6].ACLR
rst_n => ps2_asci[7].ACLR
rst_n => code_3[0].ACLR
rst_n => code_3[1].ACLR
rst_n => code_3[2].ACLR
rst_n => code_3[3].ACLR
rst_n => code_3[4].ACLR
rst_n => code_3[5].ACLR
rst_n => code_3[6].ACLR
rst_n => code_3[7].ACLR
rst_n => code_2[0].ACLR
rst_n => code_2[1].ACLR
rst_n => code_2[2].ACLR
rst_n => code_2[3].ACLR
rst_n => code_2[4].ACLR
rst_n => code_2[5].ACLR
rst_n => code_2[6].ACLR
rst_n => code_2[7].ACLR
rst_n => code_1[0].ACLR
rst_n => code_1[1].ACLR
rst_n => code_1[2].ACLR
rst_n => code_1[3].ACLR
rst_n => code_1[4].ACLR
rst_n => code_1[5].ACLR
rst_n => code_1[6].ACLR
rst_n => code_1[7].ACLR
rst_n => code_last[0].ACLR
rst_n => code_last[1].ACLR
rst_n => code_last[2].ACLR
rst_n => code_last[3].ACLR
rst_n => code_last[4].ACLR
rst_n => code_last[5].ACLR
rst_n => code_last[6].ACLR
rst_n => code_last[7].ACLR
rst_n => stop_good.ACLR
rst_n => start_good.ACLR
rst_n => parity_good.ACLR
rst_n => temp_data[0].ACLR
rst_n => temp_data[1].ACLR
rst_n => temp_data[2].ACLR
rst_n => temp_data[3].ACLR
rst_n => temp_data[4].ACLR
rst_n => temp_data[5].ACLR
rst_n => temp_data[6].ACLR
rst_n => temp_data[7].ACLR
rst_n => num[0].ACLR
rst_n => num[1].ACLR
rst_n => num[2].ACLR
rst_n => num[3].ACLR
rst_n => ps2_state_r.ACLR
rst_n => key_e0.ACLR
rst_n => key_f0.ACLR
rst_n => newcode2.ACLR
rst_n => newkey.ACLR
rst_n => ps2_byte_r[7].ENA
rst_n => ps2_byte_r[6].ENA
rst_n => ps2_byte_r[5].ENA
rst_n => ps2_byte_r[4].ENA
rst_n => ps2_byte_r[3].ENA
rst_n => ps2_byte_r[2].ENA
rst_n => ps2_byte_r[1].ENA
rst_n => ps2_byte_r[0].ENA
switch[0] => ps2_byte.OUTPUTSELECT
switch[0] => ps2_byte.OUTPUTSELECT
switch[0] => ps2_byte.OUTPUTSELECT
switch[0] => ps2_byte.OUTPUTSELECT
switch[0] => ps2_byte.OUTPUTSELECT
switch[0] => ps2_byte.OUTPUTSELECT
switch[0] => ps2_byte.OUTPUTSELECT
switch[0] => ps2_byte.OUTPUTSELECT
switch[1] => ps2_byte.OUTPUTSELECT
switch[1] => ps2_byte.OUTPUTSELECT
switch[1] => ps2_byte.OUTPUTSELECT
switch[1] => ps2_byte.OUTPUTSELECT
switch[1] => ps2_byte.OUTPUTSELECT
switch[1] => ps2_byte.OUTPUTSELECT
switch[1] => ps2_byte.OUTPUTSELECT
switch[1] => ps2_byte.OUTPUTSELECT
switch[2] => ps2_byte.OUTPUTSELECT
switch[2] => ps2_byte.OUTPUTSELECT
switch[2] => ps2_byte.OUTPUTSELECT
switch[2] => ps2_byte.OUTPUTSELECT
switch[2] => ps2_byte.OUTPUTSELECT
switch[2] => ps2_byte.OUTPUTSELECT
switch[2] => ps2_byte.OUTPUTSELECT
switch[2] => ps2_byte.OUTPUTSELECT
switch[3] => ps2_byte.OUTPUTSELECT
switch[3] => ps2_byte.OUTPUTSELECT
switch[3] => ps2_byte.OUTPUTSELECT
switch[3] => ps2_byte.OUTPUTSELECT
switch[3] => ps2_byte.OUTPUTSELECT
switch[3] => ps2_byte.OUTPUTSELECT
switch[3] => ps2_byte.OUTPUTSELECT
switch[3] => ps2_byte.OUTPUTSELECT
ps2k_clk => led[0].DATAIN
ps2k_clk => stop_good.CLK
ps2k_clk => start_good.CLK
ps2k_clk => parity_good.CLK
ps2k_clk => temp_data[0].CLK
ps2k_clk => temp_data[1].CLK
ps2k_clk => temp_data[2].CLK
ps2k_clk => temp_data[3].CLK
ps2k_clk => temp_data[4].CLK
ps2k_clk => temp_data[5].CLK
ps2k_clk => temp_data[6].CLK
ps2k_clk => temp_data[7].CLK
ps2k_clk => num[0].CLK
ps2k_clk => num[1].CLK
ps2k_clk => num[2].CLK
ps2k_clk => num[3].CLK
ps2k_data => parity_good.IN1
ps2k_data => num.OUTPUTSELECT
ps2k_data => num.OUTPUTSELECT
ps2k_data => num.OUTPUTSELECT
ps2k_data => num.OUTPUTSELECT
ps2k_data => num.OUTPUTSELECT
ps2k_data => num.OUTPUTSELECT
ps2k_data => num.OUTPUTSELECT
ps2k_data => num.OUTPUTSELECT
ps2k_data => temp_data[7].DATAIN
ps2k_data => temp_data[6].DATAIN
ps2k_data => temp_data[5].DATAIN
ps2k_data => temp_data[4].DATAIN
ps2k_data => temp_data[3].DATAIN
ps2k_data => temp_data[2].DATAIN
ps2k_data => temp_data[1].DATAIN
ps2k_data => temp_data[0].DATAIN
ps2k_data => start_good.DATAIN
ps2k_data => stop_good.DATAIN
ps2_byte[0] <= ps2_byte.DB_MAX_OUTPUT_PORT_TYPE
ps2_byte[1] <= ps2_byte.DB_MAX_OUTPUT_PORT_TYPE
ps2_byte[2] <= ps2_byte.DB_MAX_OUTPUT_PORT_TYPE
ps2_byte[3] <= ps2_byte.DB_MAX_OUTPUT_PORT_TYPE
ps2_byte[4] <= ps2_byte.DB_MAX_OUTPUT_PORT_TYPE
ps2_byte[5] <= ps2_byte.DB_MAX_OUTPUT_PORT_TYPE
ps2_byte[6] <= ps2_byte.DB_MAX_OUTPUT_PORT_TYPE
ps2_byte[7] <= ps2_byte.DB_MAX_OUTPUT_PORT_TYPE
ps2_state <= ps2_state_r.DB_MAX_OUTPUT_PORT_TYPE
led[0] <= ps2k_clk.DB_MAX_OUTPUT_PORT_TYPE
led[1] <= stop_good.DB_MAX_OUTPUT_PORT_TYPE
led[2] <= parity_good.DB_MAX_OUTPUT_PORT_TYPE
led[3] <= start_good.DB_MAX_OUTPUT_PORT_TYPE


|ps2_key|speed_select:speed_select
clk => clk_bps_r.CLK
clk => cnt[0].CLK
clk => cnt[1].CLK
clk => cnt[2].CLK
clk => cnt[3].CLK
clk => cnt[4].CLK
clk => cnt[5].CLK
clk => cnt[6].CLK
clk => cnt[7].CLK
clk => cnt[8].CLK
clk => cnt[9].CLK
clk => cnt[10].CLK
clk => cnt[11].CLK
clk => cnt[12].CLK
rst_n => cnt[0].ACLR
rst_n => cnt[1].ACLR
rst_n => cnt[2].ACLR
rst_n => cnt[3].ACLR
rst_n => cnt[4].ACLR
rst_n => cnt[5].ACLR
rst_n => cnt[6].ACLR
rst_n => cnt[7].ACLR
rst_n => cnt[8].ACLR
rst_n => cnt[9].ACLR
rst_n => cnt[10].ACLR
rst_n => cnt[11].ACLR
rst_n => cnt[12].ACLR
rst_n => clk_bps_r.ACLR
bps_start => always0.IN1
clk_bps <= clk_bps_r.DB_MAX_OUTPUT_PORT_TYPE


|ps2_key|my_uart_tx:my_uart_tx
clk => rs232_tx_r.CLK
clk => num[0].CLK
clk => num[1].CLK
clk => num[2].CLK
clk => num[3].CLK
clk => tx_data[0].CLK
clk => tx_data[1].CLK
clk => tx_data[2].CLK
clk => tx_data[3].CLK
clk => tx_data[4].CLK
clk => tx_data[5].CLK
clk => tx_data[6].CLK
clk => tx_data[7].CLK
clk => tx_en.CLK
clk => bps_start_r.CLK
clk => bps_start_r~en.CLK
clk => rx_int2.CLK
clk => rx_int1.CLK
clk => rx_int0.CLK
rst_n => tx_data[0].ACLR
rst_n => tx_data[1].ACLR
rst_n => tx_data[2].ACLR
rst_n => tx_data[3].ACLR
rst_n => tx_data[4].ACLR
rst_n => tx_data[5].ACLR
rst_n => tx_data[6].ACLR
rst_n => tx_data[7].ACLR
rst_n => tx_en.ACLR
rst_n => bps_start_r~en.ACLR
rst_n => rs232_tx_r.PRESET
rst_n => num[0].ACLR
rst_n => num[1].ACLR
rst_n => num[2].ACLR
rst_n => num[3].ACLR
rst_n => rx_int2.ACLR
rst_n => rx_int1.ACLR
rst_n => rx_int0.ACLR
clk_bps => num.OUTPUTSELECT
clk_bps => num.OUTPUTSELECT
clk_bps => num.OUTPUTSELECT
clk_bps => num.OUTPUTSELECT
clk_bps => rs232_tx_r.OUTPUTSELECT
rx_data[0] => tx_data[0].DATAIN
rx_data[1] => tx_data[1].DATAIN
rx_data[2] => tx_data[2].DATAIN
rx_data[3] => tx_data[3].DATAIN
rx_data[4] => tx_data[4].DATAIN
rx_data[5] => tx_data[5].DATAIN
rx_data[6] => tx_data[6].DATAIN
rx_data[7] => tx_data[7].DATAIN
rx_int => rx_int0.DATAIN
rs232_tx <= rs232_tx_r.DB_MAX_OUTPUT_PORT_TYPE
bps_start <= bps_start_r.DB_MAX_OUTPUT_PORT_TYPE


|ps2_key|digits:digits
clk => dig_counter[0].CLK
clk => dig_counter[1].CLK
clk => dig_counter[2].CLK
clk => dig_counter[3].CLK
clk => dig_counter[4].CLK
clk => dig_counter[5].CLK
clk => dig_counter[6].CLK
clk => dig_counter[7].CLK
clk => dig_counter[8].CLK
clk => dig_counter[9].CLK
clk => dig_counter[10].CLK
clk => dig_counter[11].CLK
clk => dig_counter[12].CLK
clk => dig_counter[13].CLK
clk => dig_counter[14].CLK
clk => dig_counter[15].CLK
state => Mux3.IN1
code[0] => Mux3.IN3
code[1] => Mux2.IN3
code[2] => Mux1.IN3
code[3] => Mux0.IN3
code[4] => Mux3.IN2
code[5] => Mux2.IN2
code[6] => Mux1.IN2
code[7] => Mux0.IN2
dig[0] <= dig.DB_MAX_OUTPUT_PORT_TYPE
dig[1] <= dig.DB_MAX_OUTPUT_PORT_TYPE
dig[2] <= <VCC>
dig[3] <= dig.DB_MAX_OUTPUT_PORT_TYPE
seg[0] <= WideOr6.DB_MAX_OUTPUT_PORT_TYPE
seg[1] <= WideOr5.DB_MAX_OUTPUT_PORT_TYPE
seg[2] <= WideOr4.DB_MAX_OUTPUT_PORT_TYPE
seg[3] <= WideOr3.DB_MAX_OUTPUT_PORT_TYPE
seg[4] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
seg[5] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
seg[6] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
seg[7] <= <VCC>


